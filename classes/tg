
import os
import pygame
from classes.Deck import Deck
from classes.Card import Card
from classes.Rodadas import Rodadas
from stylos import stylo

pygame.init()

class ScreenCard:
    '''
        Classe ScreenCard responsive por gerar e gerenciar as cartas para os jogadores.

        Então ela tem dois estados possíveis:
        - Gerar cartas para 2 jogadores
        - Gerar cartas para 1 jogadores


    '''

    def __init__(self,player_names, screen, state):
        self.screen = screen
        self.running = True
        self.deck = Deck()
        self.player_cards = {}
        self.cards_drawn = False
        self.card_width = 80
        self.card_height = 120
        self.card_images = self.load_card_images()
        self.player_names = player_names
        self.state = state

    def check_player(self):
        if self.state == "player_creation":
            print("Jogadores:", self.player_names)
            if len(self.player_names) >= 2:
                self.deck.shuffle()
                self.player_cards = self.generate_player_cards()
                print("Cartas geradas para os jogadores:", self.player_cards)
                return True
            else:
                print("Não há jogadores suficientes.")
                return False
        elif self.state == "player_vs_computer":
            print("Jogadores:", self.player_names)
            if len(self.player_names) == 1:
                self.deck.shuffle()
                self.player_cards = self.generate_player_cards()
                print("Cartas geradas para os jogadores:", self.player_cards)
                return True
            else:
                print("Não há jogadores suficientes.")

    def generate_player_cards(self):
        player_cards = {}
        for player in self.player_names:
            player_cards[player] = self.deck.deal_hand(3)
        return player_cards

    def load_card_images(self):
        pygame.init()
        suits = ['Copas', 'Espadas', 'Paus', 'Ouro']
        values = ['4', '5', '6', '7', 'Q', 'J', 'K', 'As', '2', '3']
        base_path = "data/imagem/card"
        card_images = {}
        for suit in suits:
            for value in values:
                card_name = f"{value}_{suit}.png"
                card_path = os.path.join(base_path, card_name)
                if os.path.exists(card_path):
                    try:
                        card_image = pygame.image.load(card_path)
                        card_image = pygame.transform.scale(card_image, (self.card_width, self.card_height))
                        card_images[f"{value}_{suit}"] = card_image
                    except pygame.error as e:
                        print(f"Erro ao carregar a imagem: {card_path}. Erro: {e}")
                else:
                    print(f"Arquivo não encontrado: {card_path}")
                # print(f"Imagem {card_name} carregada com sucesso")
        return card_images

    '''
    while self.running:
            if self.check_player():
                self.cardsnow =  self.generate_player_cards
                self.rounds = Rodadas(self.player_names, self.player_cards, self.card_images, self.cardsnow, 800,600)
                self.rounds.run()
                break
            else:
                self.running = False
                break
    '''
    #Ir para a próxima Classe rodada
    def run(self):
        print("Running Generatorcards")
        #se state foi player_creation vai para Rodadas
        #se state foi player_vs_computer vai para Rodadas_pc
        while self.state != "Rodadas":
            if self.state == "player_creation":
                if self.check_player():
                    self.state = "Rodadas"
                    self.rounds = Rodadas(self.player_names, self.player_cards, self.card_images, 800,600)
                    self.rounds.run()
                
            elif self.state == "player_vs_computer":
                if self.check_player():
                    self.state = "Rodadas_pc"
                    self.round2 = Rodadas_pc(self.player_names, self.player_cards, self.card_images, 800, 600)
                    self.round2.run() 
# Getters
    def get_screen(self):
        return self.screen

    def get_running(self):
        return self.running

    def get_deck(self):
        return self.deck

    def get_player_cards(self):
        return self.player_cards

    def get_cards_drawn(self):
        return self.cards_drawn

    def get_card_width(self):
        return self.card_width

    def get_card_height(self):
        return self.card_height

    def get_card_images(self):
        return self.card_images

    def get_player_names(self):
        return self.player_names

    # Setters
    def set_screen(self, screen):
        self.screen = screen

    def set_running(self, running):
        self.running = running

    def set_deck(self, deck):
        self.deck = deck

    def set_player_cards(self, player_cards):
        self.player_cards = player_cards

    def set_cards_drawn(self, cards_drawn):
        self.cards_drawn = cards_drawn

    def set_card_width(self, card_width):
        self.card_width = card_width

    def set_card_height(self, card_height):
        self.card_height = card_height

    def set_card_images(self, card_images):
        self.card_images = card_images

    def set_player_names(self, player_names):
        self.player_names = player_names